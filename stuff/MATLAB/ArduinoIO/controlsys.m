function [T,V,R,Temp,D] = controlsys(a)
% [T,V,R,Temp,D] = controlsys(a)
% controlsys(a) - opens a GUI for collecting temperatur data on an
%   arduino
% inputs:
%   a = arduino object
%
% Values needed:
%   temperature input pin number
%   fan output pin number
%   light output pin number
%   thermistor source voltage
%   voltage divider static resistor
%   R25 thermistor value
%   thermistor coefficients (A1,B1,C1,D1)
%   fan speed
%   fan switch temperature

    if(~(exist('a','var')&&isa(a,'arduino')&&isvalid(a)))
        error('The input must be a valid arduino object');
    end

    %%%%%% Resetable Variables %%%%%%
    % arduino setup
    ar.tempPin        = 14;             % arduino temperature input pin
    ar.fanPin         = 3;              % arduino fan MOSFET output pin
    ar.lightPin       = 2;              % arduino light relay output pin
    ar.vSource        = 5;              % arduino thermistor source voltage
    ar.res            = 1024;           % arduino ADC resolution
    % resistor sizes
    resist.divider    = 10000;          % resistance of second resistor in
                                        % the thermistor voltage divider
    resist.therm      =10000;
    % thermistor coefficients
    therm.a1          = 3.354016e-3;    % A1 thermistor coefficient
    therm.b1          = 2.569850e-4;    % B1 thermistor coefficient
    therm.c1          = 2.620131e-6;    % C1 thermistor coefficient
    therm.d1          = 6.383091e-8;    % D1 thermistor coefficient
    % PID coefficients
    % PID of the form K*(1+Ti/s+s*Td)
    pid.K             = 255;            % Overall proportional PID
                                        % coefficient
    pid.Ti            = 0;              % PID integration coefficient
    pid.Td            = 100;            % PID differentiation coefficient
    % temperature switching limits
    tempBound.upper        = 85;             % upper temperatur limit
    tempBound.lower        = 85;             % lower temperature limit

    %%%%%% Figure/Graph Setup %%%%%%
    % make figure
    fig = figure('Position',[0,0,750,350]);
    % make graph
    ha = axes('Units','pixels','Position',[100,100,300,200]);
    hp = plot(0,0);
    % create sliders to control axes range
    xSlider = uicontrol('Style','slider',...
        'Position',[100,40,300,20],...
        'Min',5,'Max',60,'Value',10,...
        'Callback',@sliderCallback);
    xBox = uicontrol('Style','text',...
        'Position',[210,15,50,20],...
        'String','Range: 10',...
        'HorizontalAlignment','center',...
        'SliderStep',[1/55 5/55]);
    % set graph properties
    xlabel(ha,'Time (s)');
    ylabel(ha,'Temperature (F)');
    xlim = 0;
    xlim(2) = xlim(1)+get(xSlider,'Value');
    ylim = [50 100];
    set(ha,'Xlim',xlim);
    set(ha,'Ylim',ylim);

    %%%%%% Controls/Meters Setup %%%%%%
    % meters
    meters.panel = uipanel('Title','Meters',...
        'Units','pixels',...
        'Position',[410,120,100,190]);
    meters.labels.voltage = uicontrol('Style','text',...
        'Parent',meters.panel,...
        'Units','pixels',...
        'String','Voltage (V)',...
        'Position',[5,150,88,20]);
    meters.boxes.voltage = uicontrol('Style','edit',...
        'Parent',meters.panel,...
        'Units','pixels',...
        'Position',[5,130,88,20],...
        'Enable','off');
    meters.labels.res = uicontrol('Style','text',...
        'Parent',meters.panel,...
        'Units','pixels',...
        'String','Resistance (Ohm)',...
        'Position',[5,110,88,20]);
    meters.boxes.resist = uicontrol('Style','edit',...
        'Parent',meters.panel,...
        'Units','pixels',...
        'Position',[5,90,88,20],...
        'Enable','off');
    meters.labels.temp = uicontrol('Style','text',...
        'Parent',meters.panel,...
        'Units','pixels',...
        'String','Temperature (F)',...
        'Position',[5,70,88,20]);
    meters.boxes.temp = uicontrol('Style','edit',...
        'Parent',meters.panel,...
        'Units','pixels',...
        'Position',[5,50,88,20],...
        'Enable','off');
    meters.labels.time = uicontrol('Style','text',...
        'Parent',meters.panel,...
        'Units','pixels',...
        'String','Time (s)',...
        'Position',[5,30,88,20]);
    meters.boxes.time = uicontrol('Style','edit',...
        'Parent',meters.panel,...
        'Units','pixels',...
        'Position',[5,10,88,20],...
        'Enable','off');
    
    % light & fan controls
    ctrl.panel = uipanel('Title','Light&Fan',...
        'Units','pixels',...
        'Position',[520,190,100,120]);
    ctrl.labels.fan = uicontrol('Style','text',...
        'Parent',ctrl.panel,...
        'String','Fan',...
        'Units','pixels',...
        'Position',[5,80,75,20]);
    ctrl.checks.fan = uicontrol('Style','checkbox',...
        'Parent',ctrl.panel,...
        'Position',[75,82,20,20],...
        'Value',0,...
        'Enable','off');
    ctrl.popmenu.fan = uicontrol('Style','popupmenu',...
        'Parent',ctrl.panel,...
        'String',{'Auto','On','Off'},...
        'Position',[5,60,90,20],...
        'UserData','fan',...
        'Callback',@popCallback);
    ctrl.labels.light = uicontrol('Style','text',...
        'Parent',ctrl.panel,...
        'String','Light',...
        'Units','pixels',...
        'Position',[5,30,75,20]);
    ctrl.checks.light = uicontrol('Style','checkbox',...
        'Parent',ctrl.panel,...
        'Position',[75,32,20,20],...
        'Value',0,...
        'Enable','off');
    ctrl.popmenu.light = uicontrol('Style','popupmenu',...
        'Parent',ctrl.panel,...
        'String',{'Auto','On','Off'},...
        'Position',[5,10,90,20],...
        'UserData','light',...
        'Callback',@popCallback);
    % data collection controls
    playback.panel = uipanel('Title','Playback',...
        'Units','pixels',...
        'Position',[520,120,100,65]);
    playback.buttons.stop = uicontrol('Style','pushbutton',...
        'Parent',playback.panel,...
        'Units','pixels',...
        'Position',[5,5,90,20],...
        'String','Stop',...
        'UserData',1,...
        'Callback',@stopClick);
    playback.buttons.pause = uicontrol('Style','pushbutton',...
        'Parent',playback.panel,...
        'Units','pixels',...
        'Position',[5,25,90,20],...
        'String','Pause',...
        'UserData',0,...
        'Callback',{@pauseClick,playback.buttons.stop});
    % PID controls
    pid.panel = uipanel('Title','PID',...
        'Units','pixels',...
        'Position',[630,175,100,135]);
    pid.labels.prop = uicontrol('Style','text',...
        'Parent',pid.panel,...
        'Position',[5,84,30,20],...
        'String','K');
    pid.boxes.K = uicontrol('Style','edit',...
        'Parent',pid.panel,...
        'Position',[35,85,55,20],...
        'HorizontalAlignment','left',...
        'Enable','off');
    pid.labels.int = uicontrol('Style','text',...
        'Parent',pid.panel,...
        'Position',[5,59,30,20],...
        'String','Ti');
    pid.boxes.Ti = uicontrol('Style','edit',...
        'Parent',pid.panel,...
        'Position',[35,60,55,20],...
        'HorizontalAlignment','left',...
        'Enable','off');
    pid.labels.diff = uicontrol('Style','text',...
        'Parent',pid.panel,...
        'Position',[5,34,30,20],...
        'String','Td');
    pid.boxes.Td = uicontrol('Style','edit',...
        'Parent',pid.panel,...
        'Position',[35,35,55,20],...
        'HorizontalAlignment','left',...
        'Enable','off');
    pid.labels.fSpeed = uicontrol('style','text',...
        'Parent',pid.panel,...
        'Position',[5,9,60,20],...
        'String','Fan Speed');
    pid.boxes.fSpeed = uicontrol('Style','edit',...
        'Parent',pid.panel,...
        'Position',[65,10,25,20],...
        'HorizontalAlignment','left',...
        'Enable','off');
    
    % reset variables buttons
    reset.panel = uipanel('Title','Reset Parameters',...
        'Units','pixels',...
        'Position',[410,30,320,75]);
    reset.buttons.ar = uicontrol('Style','pushbutton',...
        'Parent',reset.panel,...
        'Position',[5,35,100,25],...
        'String','Reset Arduino',...
        'Callback',@resetArduino);
    reset.buttons.resist = uicontrol('Style','pushbutton',...
        'Parent',reset.panel,...
        'Position',[110,35,100,25],...
        'String','Reset Resistors',...
        'Callback',@resetResist);
    reset.buttons.therm = uicontrol('Style','pushbutton',...
        'Parent',reset.panel,...
        'Position',[215,35,100,25],...
        'String','Reset Therm Coef',...
        'Callback',@resetTherm);
    reset.buttons.temp = uicontrol('Style','pushbutton',...
        'Parent',reset.panel,...
        'Position',[5,5,100,25],...
        'String','Reset Temp Bound',...
        'Callback',@resetTemp);
    reset.buttons.pid = uicontrol('Style','pushbutton',...
        'Parent',reset.panel,...
        'Position',[110,5,100,25],...
        'String','Reset PID Coef',...
        'Callback',@resetPID);
    reset.buttons.show = uicontrol('Style','pushbutton',...
        'Parent',reset.panel,...
        'Position',[215,5,100,25],...
        'String','Show Values',...
        'Callback',@showValues);
        
    % center the gui on the screen
    movegui(fig,'center');
    
    %%%%%% Create the prompt for the popups %%%%%%
    % arduino prompt
    reset.prompt.ar = {'Temperature Input Pin Number',...
        'Fan Output Pin Number',...
        'Light Output Pin Number',...
        'Thermistor Source Voltage',...
        'Arduino ADC resolution'};
    % resistors values prompt
    reset.prompt.resist = {'Voltage Divider Resistor Value',...
        'Thermistor Resistance at 25 C'};
    % thermistor coefficients prompt
    reset.prompt.therm = {'A1','B1','C1','D1'};
    % temperature bounds prompt
    reset.prompt.temp = {'Upper Bound','Lower Bound'};
    % PID coefficients prompt
    reset.prompt.pid = {'K','Ti','Td'};
    
    %%%%%% Prompt User For Initial Values %%%%%%
    skipWarning=true;
    resetData();
    resetArduino();
    resetResist();
    resetTherm();
    resetTemp();
    resetPID();
    skipWarning=false;
    
    %%%%%% Meat of the Program %%%%%%
    while(get(playback.buttons.stop,'UserData'))
        %get time
        t = toc(collectTime)+t_offset;
        %get data
        [v,r,d,temp] = getData();
        %update arrays
        V = [V,v]; R = [R,r]; T = [T,t]; Temp = [Temp,temp]; D = [D,d];
        %update gui
        set(meters.boxes.voltage,'String',v);
        set(meters.boxes.resist,'String',r);
        set(meters.boxes.time,'String',t);
        set(meters.boxes.temp,'String',temp);
        if(t>xlim(2))
            xlim = [xlim(2),xlim(2)+get(xSlider,'Value')];
        end
        axis([xlim ylim]);
        set(hp,'XData',T,'YData',Temp);
        if(get(ctrl.popmenu.fan,'Value')==1)
            if(temp>tempBound.upper)
                startFan();
            elseif(temp<tempBound.lower)
                stopFan();
            end
        end
        if(get(ctrl.popmenu.fan,'Value')==1)
            if(temp>100)
                stopLight();
            elseif(temp<=100)
                startLight();
            end
        end
        pause(.01);
    end
    
    close(fig);
    
    %%%%%% Sub-Functions %%%%%%
    % collects data from inputs
    function [v,r,d,temp] = getData()
        d = a.analogRead(ar.tempPin);
        v = ar.vSource*d/(ar.res-1);
        r = resist.divider*v/(ar.vSource-v);
        temp = (therm.a1 ...
            -therm.b1*log(r/resist.therm) ...
            -therm.c1*log(r/resist.therm)^2 ...
            -therm.d1*log(r/resist.therm)^3)^(-1);
        temp = (temp-273)*9/5+32;
    end

    % calculate the fan speed with the PID transfer function
    function H = calcSpeed()
        persistent I
        if(isempty(I))
            I=0;
        end
        if(length(T)>=2)
            I = I+1/2*(T(length(T))-T(length(T)-1))*...
                (Temp(length(T))+Temp(length(T)-1));
            D = (Temp(length(T))-Temp(length(T)-1))/...
                (T(length(T))-T(length(T)-1));
            H=pid.K*(1+pid.Ti*I+pid.Td*D);
        else
            H=pid.K;
        end
        if(H>255)
            H=255;
        end
        if(H<0)
            H=0;
        end
        H=round(H);
        set(pid.boxes.fSpeed,'String',H);
    end

    % callback function for the x-axis slider
    function [] = sliderCallback(source,~)
        set(source,'Value',round(get(source,'Value')));
        set(xBox,'String',sprintf('Range: %d',get(source,'Value')));
        if(~isempty(T))
            xlim(1) = T(length(T))-mod(T(length(T)),get(xSlider,'Value'));
        else
            xlim(1) = 0;
        end
        xlim(2) = xlim(1)+get(source,'Value');
        set(ha,'Xlim',xlim);
    end

    function [] = popCallback(source,~)
        if(isequal(get(source,'UserData'),'fan'))
            switch (get(source,'Value'))
                case (1)
                    startFan();
                case (2)
                    startFan();
                case (3)
                    stopFan();
            end
        elseif(isequal(get(source,'UserData'),'light'))
            switch (get(source,'Value'))
                case (1)
                    startLight();
                case (2)
                    startLight();
                case (3)
                    stopLight();
            end
        else
            fprintf('error\n');
        end
    end

    % pause button is clicked
    function [] = pauseClick(source,~,eBut)
        fprintf('pauseClick\n');
        if(get(source,'UserData'))
            fprintf('Unpaused\n');
            set(source,'String','Pause');
            set(source,'UserData',0);
        else
            fprintf('Paused\n');
            set(source,'UserData',1);
            set(source,'String','Play');
            pauseCol(source,eBut);
        end
    end

    % stop button is clicked
    function [] = stopClick(source,~)
        fprintf('stopClick\n');
        set(source,'UserData',0);
    end

    % pauses data collection
    function [] = pauseCol(pBut,eBut)
        set(pBut,'String','Play');
        t_offset = 0;
        while(get(pBut,'UserData')&&get(eBut,'UserData'))
            drawnow;
        end
        if(~isempty(T))
            t_offset = T(length(T));
        end
        collectTime = tic;
        set(pBut,'String','Pause');
    end

    % starts fan
    function [] = startFan()
        a.analogWrite(ar.fanPin,calcSpeed());
        set(ctrl.checks.fan,'Value',1);
    end

    % stops fan
    function [] = stopFan()
        a.analogWrite(ar.fanPin,0);
        set(ctrl.checks.fan,'Value',0);
    end

    % starts light
    function [] = startLight()
        a.digitalWrite(ar.lightPin,1);
        set(ctrl.checks.light,'Value',1);
    end

    % stops light
    function [] = stopLight()
        a.digitalWrite(ar.lightPin,0);
        set(ctrl.checks.light,'Value',0)
    end

    % resets the collected data and time
    function [] = resetData(~,~)
        %start timer
        t_offset = 0;
        collectTime = tic;
        %initialize all of the output arrays
        V = []; R = []; T = []; Temp = []; D = [];
        set(hp,'XData',T,'YData',Temp);
        xlim = [0 get(xSlider,'Value')];
        axis([xlim ylim]);
        set(meters.boxes.voltage,'String',0);
        set(meters.boxes.resist,'String',0);
        set(meters.boxes.temp,'String',0);
        set(meters.boxes.time,'String',0);
    end

    % prompts user to enter new values for the arduino values
    function [] = resetArduino(~,~)
        answer='Yes';
        if(~skipWarning)
            if(~isempty(T))
                t_offset = T(length(T));
            end
            answer = questdlg(...
            {'Warning! This will reset you data!' 'Continue?'},...
            'Warning','Yes','No','No');
            collectTime = tic;
        end
        if(strcmp(answer,'Yes'))
            fprintf('Reseting Arduino Settings...\n');
            answer = inputdlg(reset.prompt.ar,...
                'Set Arduino Values',...
                1,...
                {num2str(ar.tempPin),num2str(ar.fanPin),...
                num2str(ar.lightPin),num2str(ar.vSource),num2str(ar.res)});
            drawnow; pause(0.1);
            if(~isempty(answer))
                ar.tempPin  = str2double(answer{1});
                ar.fanPin   = str2double(answer{2});
                ar.lightPin = str2double(answer{3});
                ar.vSource  = str2num(answer{4});
                ar.res      = str2double(answer{5});
            end

            a.pinMode(ar.tempPin,'Input');
            a.pinMode(ar.fanPin,'Output');
            a.pinMode(ar.lightPin,'Output');
            resetData();
        end
    end

    % prompts user to enter new values for the circuit resistor values
    function [] = resetResist(~,~)
        answer='Yes';
        if(~skipWarning)
            if(~isempty(T))
                t_offset = T(length(T));
            end
            answer = questdlg(...
            {'Warning! This will reset you data!' 'Continue?'},...
            'Warning','Yes','No','No');
            collectTime = tic;
        end
        if(strcmp(answer,'Yes'))
            fprintf('Reseting Resistor Settings...\n');
            answer = inputdlg(reset.prompt.resist,...
                'Set Circuit Resistor Values',...
                1,...
                {num2str(resist.divider),num2str(resist.therm)});
            drawnow; pause(0.1);
            if(~isempty(answer))
                ar.divider = str2num(answer{1});
                ar.therm   = str2num(answer{2});
            end
            resetData();
        end
    end

    % prompts user to enter new values for the thermistor coefficients
    function [] = resetTherm(~,~)
        answer='Yes';
        if(~skipWarning)
            if(~isempty(T))
                t_offset = T(length(T));
            end
            answer = questdlg(...
            {'Warning! This will reset you data!' 'Continue?'},...
            'Warning','Yes','No','No');
            collectTime = tic;
        end
        if(strcmp(answer,'Yes'))
            fprintf('Reseting Thermistor Coefficient Settings...\n');
            answer = inputdlg(reset.prompt.therm,...
                'Set Thermistor Coefficient Values',...
                1,...
                {num2str(therm.a1),num2str(therm.b1),...
                num2str(therm.c1),num2str(therm.d1)});
            drawnow; pause(0.1);
            if(~isempty(answer))
                therm.a1 = str2num(answer{1});
                therm.b1 = str2num(answer{2});
                therm.c1 = str2num(answer{3});
                therm.b1 = str2num(answer{4});
            end
            resetData();
        end
    end

    % prompts user to enter new values for the temperature bounds
    function [] = resetTemp(~,~)
        answer='Yes';
        if(~skipWarning)
            if(~isempty(T))
                t_offset = T(length(T));
            end
            answer = questdlg(...
            {'Warning! This will reset you data!' 'Continue?'},...
            'Warning','Yes','No','No');
            collectTime = tic;
        end
        if(strcmp(answer,'Yes'))
            fprintf('Reseting Temperature Bound Settings...\n');
            answer = inputdlg(reset.prompt.temp,...
                'Set Temperature Bound Values',...
                1,...
                {num2str(tempBound.upper),num2str(tempBound.lower)});
            drawnow; pause(0.1);
            if(~isempty(answer))
                tempBound.upper = str2num(answer{1});
                tempBound.lower = str2num(answer{2});
            end
            ylim(1) = tempBound.lower-20;
            ylim(2) = tempBound.upper+10;
            resetData();
        end
    end

    % prompts user to enter new values for the pid coefficients
    function [] = resetPID(~,~)
        answer='Yes';
        if(~skipWarning)
            if(~isempty(T))
                t_offset = T(length(T));
            end
            answer = questdlg(...
            {'Warning! This will reset you data!' 'Continue?'},...
            'Warning','Yes','No','No');
            collectTime = tic;
        end
        if(strcmp(answer,'Yes'))
            fprintf('Reseting PID Coefficient Settings...\n');
            answer = inputdlg(reset.prompt.pid,...
                'Set PID Coefficient Values',...
                1,...
                {num2str(pid.K),num2str(pid.Ti),num2str(pid.Td)});
            drawnow; pause(0.1);
            if(~isempty(answer))
                pid.K  = str2num(answer{1});
                pid.Ti = str2num(answer{2});
                pid.Td = str2num(answer{3}); 
            end
            set(pid.boxes.K,'String',pid.K);
            set(pid.boxes.Ti,'String',pid.Ti);
            set(pid.boxes.Td,'String',pid.Td);
            resetData();
        end
    end

    % shows all of the setup values that have been saved
    function [] = showValues(~,~)
        msgbox({...
            '/------------------------\',...
            '| Arduino Values |',...
            '\------------------------/',...
            sprintf('Temperature Pin: %d',ar.tempPin),...
            sprintf('Fan Pin: %d',ar.fanPin),...
            sprintf('Light Pin: %d',ar.lightPin),...
            sprintf('Source Voltage: %.1f V',ar.vSource),...
            sprintf('ADC Resolution: %d',ar.res),...
            '/------------------------\',...
            '| Resistor Values |',...
            '\------------------------/',...
            sprintf('Voltage Divider Resistor: %.0f Ohm',...
                resist.divider),...
            sprintf('Thermistor Resistance @ 25C: %.0f Ohm',...
                resist.therm),...
            '/-----------------------------------\',...
            '| Thermister Coefficients |',...
            '\-----------------------------------/',...
            sprintf('A1: %f',therm.a1),...
            sprintf('B1: %f',therm.b1),...
            sprintf('C1: %f',therm.c1),...
            sprintf('D1: %f',therm.d1),...
            '/---------------------------------\',...
            '| Temperature Bounds |',...
            '\---------------------------------/',...
            sprintf('Upper Bound: %fF',tempBound.upper),...
            sprintf('Lower Bound: %fF',tempBound.lower),...
            '/-------------------------\',...
            '| PID Coefficients |',...
            '\-------------------------/',...
            sprintf('K: %f',pid.K),...
            sprintf('Ti: %f',pid.Ti),...
            sprintf('Td: %f',pid.Td)},'Input Parameters');
    end
end